What happens when you initialize a repository? Why do you need to do it?

The directory is marked as a git repository. The next thing to do is to add files to that repository in order for their changes to be tracked.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area represents an intermediary step between the directory and a commit and, thus, the repository. It can be compared to a snapshot of specific files belonging to the directory, at a specific point in time.


How can you use the staging area to make sure you have one commit per logical change?

One way would be by adding only one item at a time to the staging area and then commiting it.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches help keep versions of the files which differ in a greater way than just a commit.
As said, creating a new difficulty for a game
		 		  a new language for the game
		 		  a new feature



How do the diagrams help you visualize the branch structure?

Seeing when work on a new feature started
Perhaps the parent node of that branch may give a hint on the inspiration for creating that respective branch
Kinda the only way of representing branches


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a single branch, that is also why it is represented that way in the diagram.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging is fine, but it combining two existing versions of a piece of code might include two features which partially or totally overlap, an example was given during one ov the lessons: having two versions of the same function. Manual mergining will usually work towards clearing the code of such errors.